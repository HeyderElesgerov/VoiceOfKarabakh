@model List<System.Globalization.CultureInfo>;

@{
    ViewData["Title"] = "Edit Donation";
    Layout = "_AdminLayout";
}

<link href="~/Dynamic-Autocomplete-Tag-Input-Plugin-For-jQuery-Tokenize2/tokenize2.css" rel="stylesheet" />
<link href="~/ImageUploaderWithPreview/index.css" rel="stylesheet" />
<link href="~/richtexteditor/rte_theme_default.css" rel="stylesheet" />

<style>
    .loader {
        border: 16px solid #f3f3f3; /* Light grey */
        border-top: 16px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 120px;
        height: 120px;
        animation: spin 2s linear infinite;
        position: relative;
        margin: 0 auto;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

@foreach (var culture in Model)
{
    <input class="culture" value="@culture.TwoLetterISOLanguageName" hidden />
}

<input id="donationId" value="@ViewData["id"].ToString()" hidden />
<input id="donationCategoryId" hidden />
<input id="existingImageId" hidden />
<input id="titleSetId" hidden />
<input id="metaTitleSetId" hidden />
<input id="contentSetId" hidden />

<div class="loader" id="loader" style="display: block;"></div>

<form method="post" enctype="multipart/form-data" id="editForm">
    @for (int i = 0; i < Model.Count; i++)
    {
        <div class="text-center">
            <h4>@Model[i].DisplayName</h4>
        </div>

        <div class="form-group">
            <label>Title</label>
            <input class="form-control" id="@Model[i].TwoLetterISOLanguageName-title" placeholder="Enter title" />

        </div>
        <div class="form-group">
            <label>Meta Title</label>
            <input class="form-control" id="@Model[i].TwoLetterISOLanguageName-metaTitle" placeholder="Enter meta title" />
        </div>
        <div class="form-group">
            <label>Content</label>
            <input id="@Model[i].TwoLetterISOLanguageName-content" hidden />
            <div id="@Model[i].TwoLetterISOLanguageName-editor" class="richtexteditor" style="width: 100%;">
            </div>
        </div>
        <br />
    }
    <div class="form-group">
        <label><b>Donation Category</b></label>
        <select class="form-control" id="donationCategoriesSelectList" onchange="console.log(this)">
        </select>
    </div>
    <br />
    @*<div class="form-group">
            <label><b>Has constant price?</b></label>
            <input type="checkbox" onclick="togglePrice()" id="constantPriceCheckBox" />
        </div>
        <div class="form-group" id="priceContainer" style="visibility: hidden">
            <label><b>Price</b></label><span>(Required field)</span>
            <input class="form-control" id="price" type="number" />
        </div>*@

    <div class="form-group">
        <label><b>Current Photo</b></label>
        <img id="existingImagePreview" width="300" height="150">
    </div>
    <br />
    <div class="image-input form-group">
        <input id="existingImage" hidden />

        <input type="file" accept="image/*" id="imageInput" name="HeaderPhoto">
        <label for="imageInput" class="image-button">Choose new image</label>

        <img class="image-preview">
        <span class="change-image">Choose different image</span>
    </div>
    <div class="form-group">
        <input class="form-control btn btn-success" type="button" onclick="publish()" value="Save" />
    </div>
</form>


<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/Dynamic-Autocomplete-Tag-Input-Plugin-For-jQuery-Tokenize2/tokenize2.js"></script>
<script src="~/ImageUploaderWithPreview/index.js"></script>
<script src="~/richtexteditor/rte.js"></script>
<script src="~/richtexteditor/plugins/all_plugins.js"></script>

<script>
    let cultures = [];
    let id = document.getElementById('donationId').value;
    let form = document.getElementById('editForm');
    let loader = document.getElementById('loader');
    let priceContainer = document.getElementById('priceContainer');

    getPost();

    for (let cultureField of document.getElementsByClassName('culture')) {
        cultures.push(cultureField.value);
    }

    function getPost() {
        showLoading();

        fetch('/api/donations/' + id, {
            method: 'GET'
        })
            .then(resp => resp.json())
            .then(result => {
                if (result.status) {
                    if (result.status == 404 || result.status == 500) {
                        alert('Not found!');
                        window.location.href = window.location.origin + '/Donation/AdminIndex';
                    }
                }
                console.log(result)

                document.getElementById('donationCategoryId').value = result.donationCategoryId;
                //priceContainer.getElementsByTagName('input')[0].value = result.price;

                /*if (result.price != 0) {
                    document.getElementById('constantPriceCheckBox').checked = true;
                    togglePrice();
                }*/

                initSetIds(
                    result.titleLocalizations[0], result.metaTitleLocalizations[0], result.contentLocalizations[0])

                initTitles(result.titleLocalizations)
                initMetaTitles(result.metaTitleLocalizations)
                initContents(result.contentLocalizations);
                initPhoto(result.photoPath, result.photoId);
                initEditors();

                initDonationCategories();
                hideLoading();
            })
    }

    function initDonationCategories() {
        fetch('/api/donationcategories/az', {
            method: 'GET'
        })
            .then(resp => resp.json())
            .then(categories => {
                var selectlist = document.getElementById('donationCategoriesSelectList');
                let selectedDonationId = document.getElementById('donationCategoryId').value;

                for (let donationCategory of categories) {
                    let selected = donationCategory.id == selectedDonationId;
                    let option;

                    if (selected) {
                        option = `<option value="${donationCategory.id}" selected>${donationCategory.title}</option>`;
                    }
                    else {
                        option = `<option value="${donationCategory.id}">${donationCategory.title}</option>`;
                    }

                    selectlist.innerHTML += option;
                }
            });
    }

    function initSetIds(titleLocSet, metaTitleLocSet, contentLocSet) {
        document.getElementById('titleSetId').value = titleLocSet.localizationSetId;
        document.getElementById('metaTitleSetId').value = metaTitleLocSet.localizationSetId;
        document.getElementById('contentSetId').value = contentLocSet.localizationSetId;
    }

    function initTitles(titles) {
        for (let i = 0; i < titles.length; i++) {
            let title = titles[i];
            document.getElementById(title.cultureCode + '-title').value = title.value;
        }
    }

    function initMetaTitles(metaTitles) {
        for (let i = 0; i < metaTitles.length; i++) {
            let metaTitle = metaTitles[i];
            document.getElementById(metaTitle.cultureCode + '-metaTitle').value = metaTitle.value;
        }
    }

    function initContents(contents) {
        for (let i = 0; i < contents.length; i++) {
            let content = contents[i];
            document.getElementById(content.cultureCode + '-content').value = content.value;
        }
    }

    function initPhoto(path, id) {
        document.getElementById('existingImage').value = path;
        document.getElementById('existingImageId').value = id;
        document.getElementById('existingImagePreview').src = "/Photos/" + path
    }

    function initEditors() {
        let editors = [];

        for (let culture of cultures) {
            var editor = new RichTextEditor(document.getElementById(culture + "-editor"));
            editors.push(editor);
        }

        for (let i = 0; i < cultures.length; i++) {
            let editor = editors[i];
            let culture = cultures[i];

            editor.setHTMLCode(document.getElementById(culture + "-content").value);
            editor.attachEvent("change", function () {
                console.log(editor.getHTMLCode());
                document.getElementById(culture + '-content').value = editor.getHTMLCode();
            });
        }
    }

    function getFormData() {
        var formData = new FormData();
        formData.append("Id", id)

        let selectedDonationCategoryId;
        for (let opt of document.getElementById('donationCategoriesSelectList').getElementsByTagName('option')) {
            if (opt.selected) {
                selectedDonationCategoryId = opt.value;
                break;
            }
        }

        formData.append("DonationCategoryId", selectedDonationCategoryId)
        //formData.append("Price", document.getElementById('price').value)

        let imageInput = document.getElementById('imageInput');

        if (imageInput.files && imageInput.files.length > 0) {
            formData.append("NewPhoto", imageInput.files[0]);
        }
        else {
            formData.append("NewPhoto", null);
        }


        for (let i = 0; i < cultures.length; i++) {
            formData.append(`TitleLocalizations[${i}].CultureCode`, cultures[i])
            formData.append(`TitleLocalizations[${i}].Value`, document.getElementById(`${cultures[i]}-title`).value)
            formData.append(`TitleLocalizations[${i}].LocalizationSetId`, document.getElementById(`titleSetId`).value)

            formData.append(`MetaTitleLocalizations[${i}].CultureCode`, cultures[i])
            formData.append(`MetaTitleLocalizations[${i}].Value`, document.getElementById(`${cultures[i]}-metaTitle`).value)
            formData.append(`MetaTitleLocalizations[${i}].LocalizationSetId`, document.getElementById(`metaTitleSetId`).value);

            formData.append(`ContentLocalizations[${i}].CultureCode`, cultures[i])
            formData.append(`ContentLocalizations[${i}].Value`, document.getElementById(`${cultures[i]}-content`).value)
            formData.append(`ContentLocalizations[${i}].LocalizationSetId`, document.getElementById(`contentSetId`).value)
        }

        return formData;
    }

    function publish() {
        var formData = getFormData();
        let msg = 'Edited succesfully!';
        send(formData, msg);
    }

    function send(formData, msg) {
        showLoading();

        fetch('/api/donations', {
            method: 'PUT',
            headers: {
                'Accept-Encoding': 'multipart/form-data'
            },
            body: formData
        })
            .then(resp => {
                if (resp.status) {
                    if (resp.status == 204) {//updated succesfully
                        hideLoading();
                        alert(msg);
                        window.location.href = window.location.origin + '/Donation/AdminIndex';
                    }
                }

                return resp.json();
            })
            .then(result => {
                if (result.errors) {
                    hideLoading();
                    handleErrors(result.errors);
                }
            })
            .catch(err => console.log(err));
    }

    function handleErrors(errors) {
        console.log(errors);
        if (errors.Price) {
            alert('Price is required!')
        }
    }

    function showLoading() {
        loader.style.display = 'block';
        form.style.display = 'none';
    }

    function hideLoading() {
        loader.style.display = 'none';
        form.style.display = 'block';
    }

    /*function togglePrice() {
        if (document.getElementById('constantPriceCheckBox').checked) {
            priceContainer.style.visibility = 'visible';
        }
        else {
            priceContainer.style.visibility = 'hidden';
            priceContainer.getElementsByTagName('input')[0].value = 0;
        }
    }*/
</script>